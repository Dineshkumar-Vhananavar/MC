# EXPERIMENT 1 CDMA

import numpy as np

# Define the four signals used for transmission
c1 = [1, 1, 1, 1]
c2 = [1, -1, 1, -1]
c3 = [1, 1, -1, -1]
c4 = [1, -1, -1, 1]

# Create an empty list to store the selected channel
rc = []

print("Enter the data bits :")

# Read the data bits entered by the user
d1 = int(input("Enter D1: "))
d2 = int(input("Enter D2: "))
d3 = int(input("Enter D3: "))
d4 = int(input("Enter D4: "))

# Multiply each data bit with the corresponding signal
r1 = np.multiply(c1, d1)
r2 = np.multiply(c2, d2)
r3 = np.multiply(c3, d3)
r4 = np.multiply(c4, d4)

# Add all the resulting signals together
resultant_channel = r1 + r2 + r3 + r4

print("Resultant Channel:", resultant_channel)

# Prompt the user to enter the station to listen to
Channel = int(input("Enter the station to listen for C1=1, C2=2, C3=3, C4=4: "))

# Select the corresponding channel based on the user's input
if Channel == 1:
    rc = c1
elif Channel == 2:
    rc = c2
elif Channel == 3:
    rc = c3
elif Channel == 4:
    rc = c4

# Calculate the inner product of the resultant channel and the selected channel
inner_product = np.multiply(resultant_channel, rc)
print("Inner Product:", inner_product)

# Sum up the inner products and calculate the transmitted data bit
res1 = sum(inner_product)
data = res1 / len(inner_product)

print("Data bit that was sent:", data)


----------------------------------------------------------------------------------------------------------------------------------------------------



# EXPERIMENT 4 BER Performance

clear
N = 10^6 % number of bits or symbols rand('state',100); 
% initializing the rand() function randn('state',200);
% initializing the randn() function
% Transmitter
ip = rand(1,N)>0.5; % generating 0,1 with equal probability 

s = 2*ip-1; % BPSK modulation 0 -> -1; 1 -> 1
n = 1/sqrt(2)*[randn(1,N) + j*randn(1,N)]; % white gaussian noise, 0dB variance 
Eb_N0_dB = [-3:10]; % multiple Eb/N0 values


for ii = 1:length(Eb_N0_dB)
   % Noise addition
   y = s + 10^(-Eb_N0_dB(ii)/20)*n; % additive white gaussian noise

   % receiver - hard decision decoding 

   ipHat = real(y)>0;

   % counting the errors
   nErr(ii) = size(find([ip- ipHat]),2); 

end
simBer = nErr/N; % simulated ber
theoryBer = 0.5*erfc(sqrt(10.^(Eb_N0_dB/10))); % theoretical ber

% plot 

close all 
figure
semilogy(Eb_N0_dB,theoryBer,'b.-'); 
hold on  
semilogy(Eb_N0_dB,simBer,'mx-');
axis([-3 10 10^-5 0.5])
grid on
legend('theory', 'simulation'); 
xlabel('Eb/No, dB'); 
ylabel('Bit Error Rate');
title('Bit error probability curve for BPSK modulation');



----------------------------------------------------------------------------------------------------------------------------------------------------




# EXPERIMENT 8 TCP/IP

# Code For Server

import socket
import sys

# Create a socket object
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Define the server address
server_address = ('localhost', 10000)

# Bind the socket to the server address
server.bind(server_address)

# Listen for incoming connections
server.listen(1)

# Accept a client connection
connection, client_address = server.accept()

# Specify the file name to be sent
file_name = "Text.txt"

# Send the file name to the client
connection.sendall(file_name.encode())

# Open the file in binary mode
file = open("Text.txt", "rb")

# Read the file data
data = file.read()

# Send the file data to the client
connection.sendall(data)

# Close the file
file.close()

# Close the client connection
connection.close()

# Close the server socket
server.close()





# Code For Client

import socket
import sys

# Create a socket object
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Define the server address
server_address = ('localhost', 10000)

# Connect to the server
client.connect(server_address)

# Receive the file name from the server
file_name = client.recv(1000).decode()

# Modify the file name
file_name = "hello" + file_name

# Open the file in binary mode for writing
file = open(file_name, "wb")

# Receive the file data from the server
data = client.recv(4097)

# Write the received data to the file
file.write(data)

# Close the file
file.close()

# Close the client socket
client.close()



----------------------------------------------------------------------------------------------------------------------------------------------------